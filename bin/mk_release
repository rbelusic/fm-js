#!/bin/bash
echo "Release setup ..."

GIT_LAST_VER_TAG=$(git describe --abbrev=0 --match  v[0-9]*.[0-9]*.* 2> /dev/null) # v0.8.0
if [ "$GIT_LAST_VER_TAG" == "" ]; then 
    echo "Version tag is not present, aborting release deployment"; 
    exit 0
fi

echo "Version: $GIT_LAST_VER_TAG"; 

VER_MAJOR=$(echo $GIT_LAST_VER_TAG       | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9][a-Z]*\)/\1/' 2> /dev/null)
VER_MINOR=$(echo $GIT_LAST_VER_TAG       | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9][a-Z]*\)/\2/' 2> /dev/null)
VER_FIX=$(echo $GIT_LAST_VER_TAG         | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9][a-Z]*\)/\3/' 2> /dev/null)

REL_NAME0=""
REL_NAME1=""

if [[ $VER_FIX == rel* ]]; then 
    echo "Stable release."
    REL_NAME0="latest-stable"
    REL_NAME1="$VER_MAJOR.$VER_MINOR"
elif [[ $VER_FIX == rc* ]]; then 
    echo "RC release."
    REL_NAME0="latest-unstable"
    REL_NAME1="$VER_MAJOR.$VER_MINOR.$VER_FIX"
else
    echo "Unstable release."
    REL_NAME0="latest-unstable"
    REL_NAME1="$VER_MAJOR.$VER_MINOR.$VER_FIX"
fi
echo "Version parsed: $VER_MAJOR $VER_MINOR $VER_FIX"
echo "Release names: [$REL_NAME0], [$REL_NAME1]"


echo "Cloning gh-pages branch ..."
BCWD=$(pwd)
git clone -b gh-pages https://github.com/rbelusic/fm-js.git release/gh-pages
cd release/gh-pages
git checkout gh-pages

echo "Preparing release ..."
mkdir -p {releases,apidoc,tmp}

cd tmp
cp -r $BCWD/build fm-js-$REL_NAME0
zip -r ../releases/fm-js-$REL_NAME0.zip fm-js-$REL_NAME0
mv fm-js-$REL_NAME0 fm-js-$REL_NAME1
zip -r ../releases/fm-js-$REL_NAME1.zip fm-js-$REL_NAME1
cd ..
rm -rf tmp

cp -r $BCWD/build/apidoc apidoc/fm-js-$REL_NAME0
cp -r $BCWD/build/apidoc apidoc/fm-js-$REL_NAME1

# make releases list
cd releases
for frel in *.zip
do
    ver=${frel/fm-js-/}
    ver=${ver/-unstable\./ (unstable)\.}
    ver=${ver/-stable\./ (stable)\.}
    ver=${ver/\.zip/}
    echo "|$ver|"
    dat=$(date +%Y-%m-%d)

    lstSize=${#relList[@]}
    relList[$lstSize]="{\"version\": \"$ver\", \"link\": \"/releases/$frel\", \"doc\": \"/apidoc/$frel/index.html\",\"deployed\": \"$dat\"},"
done
cd ..

# save releases list
echo "[" ${relList[@]} "]" > data/releases.json

git config user.name "$GIT_NAME"
git config user.email "$GIT_EMAIL"
git config credential.helper "store --file=.git/credentials"
echo "https://$GH_TOKEN:@github.com" >.git/credentials
git add .
git commit -m "CI script build ($GIT_LAST_VER_TAG)"

echo "Pushing back to Github ..."
git push                    

echo "Done."
cd $BCWD
                 
