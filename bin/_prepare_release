#!/bin/bash
echo "Release setup ..."

GIT_LAST_VER_TAG=$(git describe --abbrev=0 --match  v[0-9]*.[0-9]*.* 2> /dev/null) # v0.8.0
echo "Version: $GIT_LAST_VER_TAG"; 
if [ "$GIT_LAST_VER_TAG" == "" ]; then 
    echo "Version tag is not present, aborting release deployment"; 
    exit 1
fi

echo "Fetch gh-pages branch ..."
BCWD=$(pwd)
git clone -b gh-pages https://github.com/rbelusic/fm-js.git release/gh-pages
cd release/gh-pages
git checkout gh-pages
mkdir -p {releases,apidoc,data,tmp}


VER_MAJOR=$(echo $GIT_LAST_VER_TAG       | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9][a-Z]*\)/\1/' 2> /dev/null)
VER_MINOR=$(echo $GIT_LAST_VER_TAG       | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9][a-Z]*\)/\2/' 2> /dev/null)
VER_FIX=$(echo $GIT_LAST_VER_TAG         | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9][a-Z]*\)/\3/' 2> /dev/null)

REL_VER="$VER_MAJOR.$VER_MINOR.$VER_FIX"
REL_FNAME="fm-js-$REL_VER"
echo "Version parsed: $VER_MAJOR $VER_MINOR $VER_FIX"
echo "Release filename: $REL_FILE_NAME"

echo "Preparing release ..."
cd tmp
cp -r $BCWD/build $REL_FNAME
rm ../releases/$REL_FNAME.zip
zip -r ../releases/$REL_FNAME.zip $REL_FNAME
cd ..
rm -rf tmp
cp -r $BCWD/build/apidoc apidoc/$REL_FNAME

echo "Done."
cd $BCWD
exit 0
                 
